name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  CACHED_DEPENDENCY_PATHS: ${{ github.workspace }}/.yarn/unplugged # CACHED_DEPENDENCY_PATHS는 종속성 캐시 경로로, .yarn/unplugged 폴더를 가리키고 있습니다. 이 경로는 종속성 캐시를 저장하는 위치입니다
  CACHED_BUILD_PATHS: ${{ github.workspace }}/.next # CACHED_BUILD_PATHS는 빌드 캐시 경로로, .next 폴더를 가리키고 있습니다. 이 경로는 Next.js 프로젝트의 빌드 캐시를 저장하는 위치입니다.

  # BUILD_CACHE_KEY는 빌드 캐시 키로, $ {{ github.sha }}를 사용하여 현재 커밋의 고유한 식별자인 커밋 SHA를 나타냅니다. 이 키는 빌드 캐시를 식별하고 관리하는 데 사용됩니다. 
  # 커밋 SHA는 해당 커밋의 고유한 식별자이며, 커밋이 변경될 때마다 다른 값을 가집니다. 이를 통해 새로운 커밋에서 변경된 내용에 대해 캐시를 갱신할 수 있습니다.
  BUILD_CACHE_KEY: ${{ github.sha }}
  DEFAULT_NODE_VERSION: '16'

jobs:
  # job_install_dependencies: 종속성 설치 작업을 수행합니다. 
  # yarn.lock 파일을 해시하여 종속성 캐시를 체크하고, 종속성이 캐시에 없을 경우에만 종속성을 설치합니다.
  job_install_dependencies: 
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15 # job_install_dependencies 작업의 최대 실행 시간을 지정하는 부분
    # 만약 작업이 15분 이상 소요된다면, GitHub Actions는 작업을 중지하고 실패로 표시합니다. 작업이 실패한 경우 추가 단계나 작업은 실행되지 않으며, 다음 작업으로 이동합니다.
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Compute dependency cache key
        id: compute_lockfile_hash
        run: echo "::set-output name=hash::${{ hashFiles('yarn.lock') }}"

      - name: Check dependency cache
        uses: actions/cache@v3
        # id는 이 작업을 식별하기 위한 고유한 식별자입니다. 다른 작업에서 이 작업의 출력 값을 참조할 때, id를 사용하여 접근할 수 있습니다.
        id: cache_dependencies
        #  with 블록은 액션에 필요한 입력 매개변수를 설정합니다. path는 캐시할 경로를 지정하고, key는 해당 캐시를 식별하는 키를 지정합니다. 
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ steps.compute_lockfile_hash.outputs.hash }}

      - name: Install dependencies
        # 조건문
        # 이전 단계에서 종속성 캐시가 적중되지 않았을 경우에만 실행되도록 설정되어 있습니다. 
        # steps.cache_dependencies.outputs.cache-hit은 cache_dependencies 작업에서 출력한 cache-hit 값을 참조하며, 캐시가 적중되지 않은 경우에만 yarn install --immutable 명령어가 실행됩니다.
        if: steps.cache_dependencies.outputs.cache-hit == ''   
        run: yarn install --immutable
    outputs: # outputs는 job_install_dependencies 작업이 완료된 후, 다른 작업에서 사용할 수 있는 값을 제공하기 위해 사용됩니다. outputs는 작업에서 생성된 결과를 저장하고, 해당 값을 다른 작업에서 참조할 수 있도록 해줍니다.
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}

  # job_build: 빌드 작업을 수행합니다. 종속성 캐시를 체크하고, 빌드 캐시를 체크한 후, 빌드를 실행합니다. 빌드 캐시가 없을 경우에만 빌드를 수행합니다.
  job_build:
    name: Build
    needs: [job_install_dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

      - name: Check build cache
        uses: actions/cache@v3
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Build
        if: steps.cache_built_packages.outputs.cache-hit == ''
        run: yarn build

    outputs:
      dependency_cache_key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

  # job_codechecks: 코드 체크 작업을 수행합니다. 종속성 캐시를 체크하고, 코드 체크를 실행합니다.
  job_codechecks:
    if: github.event_name != 'push'
    runs-on: ubuntu-latest
    name: Run codechecks
    needs: [job_install_dependencies]

    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

      - name: Run codechecks
        run: yarn codechecks
        env:
          # ${{ secrets.CC_SECRET }}는 GitHub 저장소의 Secrets에서 설정한 값에 접근하기 위해 사용됩니다.
          # GitHub Secrets는 암호화된 환경 변수로, 보안에 민감한 데이터를 안전하게 저장하고 관리할 수 있게 해줍니다. 예를 들면 API 토큰, 비밀 키, 패스워드 등을 Secrets에 저장하여 워크플로우에서 사용할 수 있습니다.
          # ${{ secrets.CC_SECRET }}는 CC_SECRET라는 이름의 Secret 값을 참조하는 표기법입니다. 해당 값은 Workflow 실행 중에 접근이 필요한 경우에 사용될 수 있습니다.
          CC_SECRET: ${{ secrets.CC_SECRET }} 

  # job_continuous_integration: 테스트 및 린트 작업을 수행합니다. 종속성 캐시를 체크하고, 린트 및 단위 테스트를 실행합니다.
  job_continuous_integration:
    runs-on: ubuntu-latest
    name: Check test & lint
    needs: [job_install_dependencies]

    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

      - name: Check Lint
        if: github.event_name != 'push'
        run: yarn lint

      - name: Check Stylelint
        if: github.event_name != 'push'
        run: yarn lint:style

      - name: Check Unit Test
        if: github.event_name != 'push'
        run: yarn test

  # job_codecov_test_coverage: 단위 테스트 커버리지를 설정하는 작업입니다. 종속성 캐시를 체크하고, 단위 테스트 커버리지를 생성한 후, 코드커버지 서비스(Codecov)에 업로드합니다.
  job_codecov_test_coverage:
    name: Set codecov unit test coverage
    runs-on: ubuntu-latest
    # needs: [job_install_dependencies]는 job_install_dependencies 작업이 성공적으로 완료된 후에 현재 작업(job_codecov_test_coverage)을 실행하도록 지정하는 부분입니다. 
    # needs 키워드를 사용하여 다른 작업들과의 의존성을 설정할 수 있습니다. 
    # 따라서 job_codecov_test_coverage 작업은 job_install_dependencies 작업의 결과에 종속되며, job_install_dependencies가 완료되기 전에는 시작되지 않습니다.
    needs: [job_install_dependencies]
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

      - name: Create Unit Test Coverage
        run: yarn test:coverage

      - name: Set unit test coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # fail_ci_if_error: true는 codecov/codecov-action 액션에서 사용되는 옵션입니다. 
          # 이 옵션이 true로 설정되면, 코드 커버리지 수집 및 보고 중에 오류가 발생하면 GitHub Actions 워크플로우가 실패로 표시됩니다. 따라서 오류가 발생하는 경우 CI (Continuous Integration)가 실패로 간주되고 추가 단계나 작업은 실행되지 않습니다. 
          # 이 옵션을 사용하여 코드 커버리지 수집에 오류가 있을 경우 워크플로우를 중단하고 문제를 신속하게 확인할 수 있습니다.
          fail_ci_if_error: true

  # job_e2e_test: E2E (End-to-End) 테스트 작업을 수행합니다. 종속성 캐시를 체크하고, Playwright 브라우저를 설치한 후, Playwright 테스트를 실행합니다. 테스트 결과를 저장하여 보관합니다.
  job_e2e_test:
    timeout-minutes: 60
    name: Check e2e test
    runs-on: ubuntu-latest
    needs: [job_install_dependencies]
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependency_cache_key }}

      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps

      - name: Run Playwright tests
        run: yarn test:e2e

      - name: Report playwright tests
        uses: actions/upload-artifact@v3
        # if: always()는 GitHub Actions에서 사용되는 조건 절입니다. 
        # 이 경우 actions/upload-artifact@v3 단계는 항상 실행됩니다. always() 조건은 조건이 항상 참으로 간주되므로 해당 단계는 성공적으로 완료되었는지 여부에 관계없이 실행됩니다.
        if: always()
        # with 키워드와 함께 사용되는 부분은 actions/upload-artifact@v3 액션에서 사용되는 입력 변수를 정의하는 부분입니다. 입력 변수를 통해 액션의 동작을 구성할 수 있습니다. 
        # 여기서는 name과 path, retention-days 세 가지 입력 변수를 사용합니다.
        with:
          # name: playwright-report: 이 입력은 업로드할 아티팩트의 이름을 정의합니다. 여기서는 "playwright-report"라는 이름으로 아티팩트를 업로드합니다.
          name: playwright-report
          # path: playwright-report/: 업로드할 아티팩트의 경로를 정의합니다. 여기서는 "playwright-report" 디렉토리에 있는 모든 파일과 하위 디렉토리를 업로드합니다.
          path: playwright-report/
          # retention-days: 30: 아티팩트를 보관할 일수를 정의합니다. 여기서는 30일 동안 아티팩트를 보관합니다. 이후에는 자동으로 삭제됩니다.
          retention-days: 30
          # 따라서 위 부분은 Playwright 테스트 결과를 아티팩트로 업로드하여 나중에 검토하고 유지 관리하는 데 사용됩니다.

  # job_nextjs_bundle_analysis: Next.js 번들 분석 작업을 수행합니다. 종속성 캐시를 체크하고, 빌드 캐시를 체크한 후, 번들 크기를 분석합니다. 이 작업은 transferwise/actions-next-bundle-analyzer 액션을 사용하여 수행됩니다.
  # 이 부분은 TransferWise가 개발한 GitHub 액션인 transferwise/actions-next-bundle-analyzer를 사용하여 번들 크기를 분석하는 작업을 수행합니다.
  job_nextjs_bundle_analysis:
    name: Nextjs bundle analysis
    runs-on: ubuntu-latest
    needs: [job_build]
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_build.outputs.dependency_cache_key }}

      - name: Check build cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: Analyze bundle sizes
      # uses: transferwise/actions-next-bundle-analyzer@master: 이 액션을 사용하여 번들 크기를 분석합니다. 
      # transferwise/actions-next-bundle-analyzer는 GitHub Marketplace에서 제공되는 액션 중 하나입니다. @master는 액션의 버전을 지정하는 것으로, 여기서는 최신 버전을 사용하고 있습니다.
        uses: transferwise/actions-next-bundle-analyzer@master
        # with 키워드를 사용하여 입력 변수를 설정합니다:
        # workflow-id: ci.yml: 분석을 실행하는 현재 워크플로우 파일의 ID를 지정합니다. 여기서는 ci.yml 파일의 ID로 설정되어 있습니다.
        # base-branch: main: 분석을 비교할 기준 브랜치를 지정합니다. main 브랜치와 비교하여 번들 크기를 분석합니다.
        with:
          workflow-id: ci.yml
          base-branch: main
        # env 키워드를 사용하여 환경 변수를 설정합니다:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}: GitHub Actions에서 제공하는 기본 환경 변수인 GITHUB_TOKEN을 사용하여 액션이 GitHub API와 상호 작용할 수 있도록 설정합니다. 이 토큰은 액션의 실행 컨
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# 이러한 CI 작업은 runs-on 속성을 통해 Ubuntu 환경에서 실행되며, 종속성 캐시와 빌드 캐시를 활용하여 반복 실행 시간을 단축합니다. 각 작업은 필요한 종속성을 설치하고 작업을 수행하기 위해 필요한 환경을 설정하는 단계로 구성됩니다.
# 파이프라인은 needs 속성을 사용하여 작업 간의 종속성을 정의합니다. 작업은 정의된 순서대로 실행되며, 이전 작업의 결과를 사용할 수 있습니다. 작업은 주어진 이벤트에 따라 실행되는 조건도 정의할 수 있습니다.
# 또한, env 섹션에서 환경 변수를 설정하고, 비밀 변수(예: secrets.CC_SECRET, secrets.CODECOV_TOKEN, secrets.GITHUB_TOKEN)를 사용하여 액션에 필요한 보안 정보를 전달합니다.
# 이 코드를 기반으로 CI/CD 파이프라인을 구성할 수 있으며, 각 작업의 목적과 필요에 따라 작업을 추가하거나 수정할 수 있습니다.
